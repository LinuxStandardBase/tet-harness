#!/usr/bin/perl -w

# Tool to summarise a journal file generated by TET 
# or to determine the difference in test results between two
# journals.
#
# (C) Copyright 2001 The Free Standards Group  Inc
#
# 21/5/2001 Chris Yeoh, IBM
#
# This is $Revision: 1.1 $
#
# $Log: tjreport,v $
# Revision 1.1  2001/08/11 11:46:13  cyeoh
# Initial version
#
#

use strict;
use Getopt::Std;

my(%StateMap) = (
 0 => "PASS",
 1 => "FAIL",
 2 => "UNRESOLVED",
 3 => "NOTINUSE",
 4 => "UNSUPPORTED",
 5 => "UNTESTED",
 6 => "UNINITIATED",
 7 => "UNREPORTED",
 101 => "WARNING",
 102 => "FIP",
 103 => "NOTIMP",
 104 => "UNAPPROVE");

my(%PFMap) = (
  "PASS" => "PASS",
  "FAIL" => "FAIL",
  "UNRESOLVED" => "FAIL",
  "NOTINUSE" => "PASS",
  "UNSUPPORTED" => "PASS",
  "UNTESTED" => "PASS",
  "UNINITIATED" => "FAIL",
  "UNREPORTED" => "FAIL",
  "WARNING" => "PASS",
  "FIP" => "PASS",
  "NOTIMP" => "PASS",
  "UNAPPROVE" => "PASS",
  "MISSING" => "FAIL",
  "UNKNOWN" => "FAIL");
  

# Analyses one journal file to get statistics on pass/failure
#
sub GatherStats($)
{
  my($journalFile) = shift;
  my($stats) = {};
  my($loop);
  my($line);
  local(*JFILE);

  # Initialise
  $stats->{STATE_SUMMARY} = {};
  foreach $loop (keys %StateMap)
  {
    $stats->{STATE_SUMMARY}{$StateMap{$loop}} = 0;
  }
  $stats->{STATE_SUMMARY}{TEST_ERROR} = 0;
  $stats->{STATE_SUMMARY}{UNKNOWN} = 0;
  $stats->{TOTAL_TESTS_PASSED} = 0;
  $stats->{TOTAL_TESTS_FAILED} = 0;

  # Analyse file
  open(JFILE, $journalFile) ||  die "Could not open file: $journalFile\n";
  
  my($testName);
  my($testNum);
  my(@line);
  my($testState);
  while (defined($line=<JFILE>))
  {
    # Look for system info
    if ($line =~ /^0\|(.*)\|/)
    {
      @line = split(/ /, $1);
      $stats->{TEST_DATE} = $line[2];
      $stats->{TEST_TIME} = $line[1];
    }
    elsif ($line=~ /^30\|.*VSX_SYS=(.*)$/)
    {
      $stats->{TEST_SYSTEM} = $1;
    }

    # Look for test results
    @line = split(/ /, $line);
    if ($line[0] =~ /^10/) { $testName = $line[1]; }
    elsif ($line[0] =~ /^400/) { $testNum = $line[1]; }
    elsif ($line[0] =~ /^220/)
    {
      # Test state report
      $testState = exists($StateMap{$line[2]}) ? $StateMap{$line[2]} 
        : "UNKNOWN";

      $stats->{STATE_SUMMARY}{$testState}++;
      $stats->{TESTS}{$testName}{$testNum} = $testState;
      
      $PFMap{$testState} eq "PASS" ? $stats->{TOTAL_TESTS_PASSED}++ 
	  : $stats->{TOTAL_TESTS_FAILED}++;
    }
  }

  close(JFILE);
  return $stats;
}


#----------------------------------------------------------------------
# Find the difference in test results between the two journals
sub DiffJournals($$)
{
  my($j1) = shift;
  my($j2) = shift;
  my($diffStats) = {};
  my($testName);
  my($testNum);

  $diffStats->{TESTS} = {};

  foreach $testName (sort keys %{$j1->{TESTS}})
  {
    foreach $testNum (sort {$a <=> $b} keys %{$j1->{TESTS}{$testName}})
    {
      if (exists($j2->{TESTS}{$testName}) 
	  && exists($j2->{TESTS}{$testName}{$testNum}))
      {
	if ($j1->{TESTS}{$testName}{$testNum} 
	    ne $j2->{TESTS}{$testName}{$testNum})
	{
	  $diffStats->{TESTS}{$testName}{$testNum} = 
	      "$j1->{TESTS}{$testName}{$testNum}," .
	      "$j2->{TESTS}{$testName}{$testNum}";
	}
      }
      else
      {
	$diffStats->{TESTS}{$testName}{$testNum} = 
	    "$j1->{TESTS}{$testName}{$testNum},MISSING";
      }
    }
  }

  # Check reverse
  foreach $testName (sort keys %{$j2->{TESTS}})
  {
    foreach $testNum (sort {$a <=> $b} keys %{$j2->{TESTS}{$testName}})
    {
      if (! (exists($j2->{TESTS}{$testName}) 
	   && exists($j2->{TESTS}{$testName}{$testNum})))
      {
	$diffStats->{TESTS}{$testName}{$testNum} = 
	    "MISSING,$j2->{TESTS}{$testName}{$testNum}";
      }
    }
  }

  
  return $diffStats;
}

#----------------------------------------------------------------------
sub PrintDiffSummary($$)
{
  my($diffStats) = shift;
  my($isDetailed)  = shift;

  my($testName);
  my($testNum);
  my($state1, $state2);

  foreach $testName (sort keys %{$diffStats->{TESTS}})
  {
    foreach $testNum (sort {$a <=> $b} keys %{$diffStats->{TESTS}{$testName}})
    {
      ($state1, $state2) = split(/,/, $diffStats->{TESTS}{$testName}{$testNum});
      if (($PFMap{$state1} ne $PFMap{$state2}) || $isDetailed)
      {
	print "$testName $testNum $diffStats->{TESTS}{$testName}{$testNum}\n";
      }
    }
  }
}


#----------------------------------------------------------------------
#
sub PrintSummary($$)
{
  my($stats) = shift;
  my($isDetailed) = shift;

  my($testState);

  my($testName);
  my($testNum);
  foreach $testName (sort keys %{$stats->{TESTS}})
  {
    foreach $testNum (sort {$a <=> $b} keys %{$stats->{TESTS}{$testName}})
    {
      if ( ($PFMap{$stats->{TESTS}{$testName}{$testNum}} eq "FAIL")
	   || $isDetailed )
      {
	print "$testName $testNum $stats->{TESTS}{$testName}{$testNum}\n";
      }
    }
  }

  print "\n\n";
  print "Test system: $stats->{TEST_SYSTEM}\n";
  print "Test was run: $stats->{TEST_DATE} $stats->{TEST_TIME} \n";

  print "Total Tests Passed: $stats->{TOTAL_TESTS_PASSED}\n";
  print "Total Tests Failed: $stats->{TOTAL_TESTS_FAILED}\n";


  foreach $testState (keys %{$stats->{STATE_SUMMARY}})
  {
    print "$testState: $stats->{STATE_SUMMARY}{$testState}\n";
  }


}

#----------------------------------------------------------------------
# Main bit

my(%options);

getopts('dh', \%options);

if (exists($options{'h'}) || ($#ARGV!=0 && $#ARGV!=1))
{
  print STDERR <<"EOM"
Usage: $0 [-h] [-d] journal [journal2]
    -h Display Help
    -d Detailed Summary
    When one journal file is supplied a summary of the tests
    is output. When two journal files are supplied the difference
    between the two is shown.

EOM
    ;
    exit(0);
}

if ($#ARGV==1)
{
  my($stats1);
  my($stats2);
  my($diffStats);
  $stats1 = GatherStats($ARGV[0]);
  $stats2 = GatherStats($ARGV[1]);
  $diffStats = DiffJournals($stats1, $stats2);
  PrintDiffSummary($diffStats, exists($options{'d'}));
}
else
{
  my($stats);
  $stats = GatherStats($ARGV[0]);
  PrintSummary($stats, exists($options{'d'}));
}

